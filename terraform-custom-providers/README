// The provider schema
// In Cloud shell, create a file named provider.go. This is the root of the provider.

touch provider.go

// Click the Open Editor button on the toolbar of Cloud Shell. (You can switch between Cloud Shell and the code editor by using the Open Editor and Open Terminal icons as required, or click the Open in new window button to leave the Editor open in a separate tab).

// In the Editor, add the following content to the provider.go file.

package main
import (
        "github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)
func Provider() *schema.Provider {
        return &schema.Provider{
                ResourcesMap: map[string]*schema.Resource{},
        }
}

// The helper/schema library is part of Terraform Core. It abstracts many of the complexities and ensures consistency between providers. The example above defines an empty provider (there are no resources).
// The *schema.Provider type describes the provider's properties including:
// the configuration keys it accepts
// the resources it supports
// any callbacks to configure
// Building the Plugin
// Go requires a main.go file, which is the default executable when the binary is built.
// Create a file named main.go.

touch main.go

// Since Terraform plugins are distributed as Go binaries, it is important to define this entry-point, which you'll do by adding the following code to the file:

package main
import (
        "github.com/hashicorp/terraform-plugin-sdk/plugin"
        "github.com/hashicorp/terraform-plugin-sdk/terraform"
)
func main() {
        plugin.Serve(&plugin.ServeOpts{
                ProviderFunc: func() terraform.ResourceProvider {
                        return Provider()
                },
        })
}

// This establishes the main function to produce a valid, executable Go binary. The contents of the main function consume Terraform's plugin library. This library deals with all the communication between Terraform core and the plugin.
// Create a module for your Terraform Go packages:

go mod init gopath/src/github.com/hashicorp/terraform-plugin-sdk

// Download and install Terraform packages and dependencies.

go get github.com/hashicorp/terraform-plugin-sdk/helper/schema
go get github.com/hashicorp/terraform-plugin-sdk/plugin
go get github.com/hashicorp/terraform-plugin-sdk/terraform

// Next, build the plugin using the Go toolchain:

go build -o terraform-provider-example

// The output name (-o) is very important. Terraform searches for plugins in the format of:

terraform-<TYPE>-<NAME>

// In the case above, the plugin is of type provider and of name example.
// List out the contents of the directory.

// To verify things are working correctly, execute the binary you just created:
./terraform-provider-example


// Defining Resources
// Terraform providers manage resources. A provider is an abstraction of an upstream API, and a resource is a component of that provider. As an example, the Google provider supports google_compute_instance and google_compute_address.
// As a general convention, Terraform providers put each resource in their own file, named after the resource, prefixed with resource_.
// Create an example_server and name it resource_server.go by convention.

touch resource_server.go

// Add the following code to the file:

package main
import (
        "github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)
func resourceServer() *schema.Resource {
        return &schema.Resource{
                Create: resourceServerCreate,
                Read:   resourceServerRead,
                Update: resourceServerUpdate,
                Delete: resourceServerDelete,
                Schema: map[string]*schema.Schema{
                        "address": &schema.Schema{
                                Type:     schema.TypeString,
                                Required: true,
                        },
                },
        }
}

// This uses the schema.Resource type. This structure defines the data schema and CRUD operations for the resource. Defining these properties are the only required thing to create a resource.
// The schema above defines one element, address, which is a required string. Terraform's schema automatically enforces validation and type casting.
// Next there are four fields defined - Create, Read, Update, and Delete. The Create, Read, and Delete functions are required for a resource to be functional. There are other functions, but these are the only required ones. Terraform itself handles which function to call and with what data. Based on the schema and current state of the resource, Terraform can determine whether it needs to create a new resource, update an existing one, or destroy.
// Each of the four struct fields point to a function. While it is technically possible to inline all functions in the resource schema, best practice dictates pulling each function into its own method. This optimizes for both testing and readability. You will fill in those stubs now, paying close attention to method signatures.
// Update the resource_server.go file and add the following contents at the end of the file.

func resourceServerCreate(d *schema.ResourceData, m interface{}) error {
        return nil
}
func resourceServerRead(d *schema.ResourceData, m interface{}) error {
        return nil
}
func resourceServerUpdate(d *schema.ResourceData, m interface{}) error {
        return nil
}
func resourceServerDelete(d *schema.ResourceData, m interface{}) error {
        return nil
}

// Lastly, update the provider schema in provider.go to register the new example_server resource.

func Provider() *schema.Provider {
        return &schema.Provider{
                ResourcesMap: map[string]*schema.Resource{
                        "example_server": resourceServer(),
                },
        }
}

// Build and test the plugin. Everything should compile as-is, although all operations are a no-op.

go build -o terraform-provider-example
./terraform-provider-example


// Move the Provider to Plugins Directory
// With Terraform 0.13+, you must specify all required providers and their respective source in your Terraform configuration. A provider source string is comprised of hostname/namespace/name.
// When you run terraform init, Terraform will attempt to download the provider from the Terraform Registry.
// If Terraform can't download the provider from the Terraform Registry (for example if the provider is local, or because of firewall restrictions), you can specify the installation method configuration explicitly. Otherwise, Terraform will implicitly attempt to find the provider locally in the appropriate subdirectory within the user plugins directory, ~/.terraform.d/plugins/${host_name}/${namespace}/${type}/${version}/${target} or %APPDATA%\terraform.d\plugins\${host_name}/${namespace}/${type}/${version}/${target}.
// In order to use the local example provider you built, you'll move it into the proper subdirectory and then, later in the lab, point to that location in a main.tf file.
// First, create the directory:

mkdir -p ~/.terraform.d/plugins/example.com/qwiklabs/example/1.0.0/linux_amd64

// Then, copy the terraform-provider-example binary into that location:

cp terraform-provider-example ~/.terraform.d/plugins/example.com/qwiklabs/example/1.0.0/linux_amd64

// Invoking the Provider
// Previous sections showed running the provider directly via the shell, which outputs a warning message like:

// Terraform plugins should be executed by Terraform directly. To test this, create a main.tf in the working directory (the same place where the plugin exists).

touch main.tf

// Next, add the following content to the file.

# This is required for Terraform 0.13+
terraform {
  required_providers {
    example = {
      version = "~> 1.0.0"
      source  = "example.com/qwiklabs/example"
    }
  }
}
resource "example_server" "my-server" {}

// Take note of the source and version included in the required_providers block. When the init command is executed, terraform will search for the example provider in the plugins folder with these specifications.
// Run terraform init to discover the newly compiled Provider:

terraform init

// If you ever set or change modules or backend configuration for Terraform,
// rerun this command to reinitialize your working directory. If you forget, other
// commands will detect it and remind you to do so if necessary.

// Now execute terraform plan:

terraform plan

// Example Output:

Error: Missing required argument
on main.tf line 10, in resource "example_server" "my-server":
10: resource "example_server" "my-server" {}
The argument "address" is required, but no definition was found.

// This validates Terraform is correctly delegating work to your plugin and that your validation is working as intended.
// Fix the validation error by adding an address field to the main.tf resource:

resource "example_server" "my-server" {
  address = "1.2.3.4"
}

// Execute terraform plan to verify the validation is passing:

terraform plan

// Implement Create
// Navigate to the resource_server.go file. Implement the Create functionality by making the following update:

func resourceServerCreate(d *schema.ResourceData, m interface{}) error {
        address := d.Get("address").(string)
        d.SetId(address)
        return nil
}

// This uses the schema.ResourceData API to get the value of address provided by the user in the Terraform configuration. Due to the way Go works, we have to typecast it to string. This is a safe operation, however, since our schema guarantees it will be a string type.
// Next, it uses SetId, a built-in function, to set the ID of the resource to the address. The existence of a non-blank ID is what tells Terraform that a resource was created. This ID can be any string value, but should be a value that can be used to read the resource again.
// Finally, you must recompile the binary and instruct Terraform to reinitialize it by rerunning terraform init. This is only necessary because you have modified the code and recompiled the binary and it no longer matches an internal hash Terraform uses to ensure the same binaries are used for each operation.
// Recompile and reinitialize the Provider:

go build -o terraform-provider-example

// Move your provider into the plugins subdirectory with a new version:

mkdir -p ~/.terraform.d/plugins/example.com/qwiklabs/example/1.0.1/linux_amd64
cp terraform-provider-example ~/.terraform.d/plugins/example.com/qwiklabs/example/1.0.1/linux_amd64

// Update the required_providers block in main.tf to use new 1.0.1 version:

# This is required for Terraform 0.13+
terraform {
  required_providers {
    example = {
      version = "~> 1.0.1"
      source  = "example.com/qwiklabs/example"
    }
  }
}

// Reinitialize Terraform:

terraform init -upgrade

// Run terraform plan:
terraform plan

terraform apply

// Since the Create operation used SetId, Terraform believes the resource created successfully. Verify this by running terraform plan.

terraform plan

// Again, because of the call to SetId, Terraform believes the resource was created. When running plan, Terraform properly determines there are no changes to apply.
// To verify this behavior, first change the value of the address field then run terraform plan again.

terraform plan

// Terraform detects the change and displays a diff with a ~ prefix, noting the resource will be modified in place, rather than created new.
// Run terraform apply to apply the changes. Terraform will again prompt for confirmation. Type yes.

terraform apply

// Since you didn't implement the Update function, you would expect the terraform plan operation to report changes, but it does not! How were your changes persisted without the Update implementation?

// Error handling & partial state
// Previously your Update operation succeeded and persisted the new state with an empty function definition. Recall the current update function:

func resourceServerUpdate(d *schema.ResourceData, m interface{}) error {
        return nil
}

// The return nil tells Terraform that the update operation succeeded without error. Terraform assumes this means any changes requested applied without error. Because of this, our state updated and Terraform believes there are no further changes.
// To say it another way: if a callback returns no error, Terraform automatically assumes the entire diff successfully applied, merges the diff into the final state, and persists it.
// Functions should never intentionally panic or call os.Exit - always return an error.
// In reality, it is a bit more complicated than this. Imagine the scenario where our update function has to update two separate fields which require two separate API calls. What do we do if the first API call succeeds but the second fails? How do we properly tell Terraform to only persist half the diff? This is known as a partial state scenario, and implementing these properly is critical to a well-behaving provider.
// Here are the rules for state updating in Terraform.
// If the Create callback returns with or without an error without an ID set using SetId, the resource is assumed to not be created, and no state is saved.
// If the Create callback returns with or without an error and an ID has been set, the resource is assumed created and all state is saved with it. Repeating because it is important: if there is an error, but the ID is set, the state is fully saved.
// If the Update callback returns with or without an error, the full state is saved. If the ID becomes blank, the resource is destroyed (even within an update, though this shouldn't happen except in error scenarios).
// If the Destroy callback returns without an error, the resource is assumed to be destroyed, and all state is removed.
// If the Destroy callback returns with an error, the resource is assumed to still exist, and all prior state is preserved.
// If partial mode (covered next) is enabled when a create or update returns, only the explicitly enabled configuration keys are persisted, resulting in a partial state.
// Here is an example of a partial mode with an update function:

func resourceServerUpdate(d *schema.ResourceData, m interface{}) error {
        // Enable partial state mode
        d.Partial(true)
        if d.HasChange("address") {
                // Try updating the address
                if err := updateAddress(d, m); err != nil {
                        return err
                }
                d.SetPartial("address")
        }
        // If we were to return here, before disabling partial mode below,
        // then only the "address" field would be saved.
        // We succeeded, disable partial mode. This causes Terraform to save
        // all fields again.
        d.Partial(false)
        return nil
}

// Note - this code will not compile since there is no updateAddress function. You can implement a dummy version of this function to play around with partial state. For this example, partial state does not mean much. If updateAddress were to fail, then the address field would not be updated.

// Implementing Destroy
// The Destroy callback is exactly what it sounds like - it is called to destroy the resource. This operation should never update any state on the resource. It is not necessary to call d.SetId(""), since any non-error return value assumes the resource was deleted successfully.
// Add the Destroy callback function in resource_server.go:

func resourceServerDelete(d *schema.ResourceData, m interface{}) error {
  // d.SetId("") is automatically called assuming delete returns no errors, but
  // it is added here for explicitness.
        d.SetId("")
        return nil
}

// The Destroy function should always handle the case where the resource might already be destroyed (manually, for example). If the resource is already destroyed, this should not return an error. This allows Terraform users to manually delete resources without breaking Terraform.

// Recompile the Provider:

go build -o terraform-provider-example

// Place it in the proper plugins subdirectory with a new version numbers:

mkdir -p ~/.terraform.d/plugins/example.com/qwiklabs/example/1.0.2/linux_amd64
cp terraform-provider-example ~/.terraform.d/plugins/example.com/qwiklabs/example/1.0.2/linux_amd64

// Update the required_providers block in main.tf to use new 1.0.2 version:

# This is required for Terraform 0.13+
terraform {
  required_providers {
    example = {
      version = "~> 1.0.2"
      source  = "example.com/qwiklabs/example"
    }
  }
}

// Reinitialize Terraform:
terraform init -upgrade

// Run terraform destroy to destroy the resource. When prompted for confirmation, type yes.
terraform destroy

// Implementing Read
// The Read callback is used to sync the local state with the actual state (upstream). This is called at various points by Terraform and should be a read-only operation. This callback should never modify the real resource.
// If the ID is updated to blank, this tells Terraform the resource no longer exists (maybe it was destroyed out of band). Just like the destroy callback, the Read function should gracefully handle this case.
// Update the Read callback function:

func resourceServerRead(d *schema.ResourceData, m interface{}) error {
  client := m.(*MyClient)
  // Attempt to read from an upstream API
  obj, ok := client.Get(d.Id())
  // If the resource does not exist, inform Terraform. We want to immediately
  // return here to prevent further processing.
  if !ok {
    d.SetId("")
    return nil
  }
  d.Set("address", obj.Address)
  return nil
}